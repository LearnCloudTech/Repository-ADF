{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "handsonproject-covid-adf"
		},
		"ls_ablob_handsonprojectcovidsa_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_ablob_handsonprojectcovidsa'"
		},
		"ls_abs_ecdc_data_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_abs_ecdc_data'"
		},
		"ls_adls_handsonprojectcoiddl_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_adls_handsonprojectcoiddl'"
		},
		"ls_adls_handsonprojectcoiddl_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://handsonprojectcoiddl.dfs.core.windows.net/"
		},
		"ls_http_casesanddeath_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().sourceBaseURL}"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_population')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Source file exists",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_ablob_population_by_age",
								"type": "DatasetReference",
								"parameters": {}
							},
							"timeout": "0.00:05:00",
							"sleep": 20
						}
					},
					{
						"name": "Get source metadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Source file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_ablob_population_by_age",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"columnCount"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Check no of columns",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get source metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Get source metadata').output.columnCount,13)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy from blob to lake",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_ablob_population_by_age",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls_population_by_age_tsv",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Delete source fie",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy from blob to lake",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_ablob_population_by_age",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-06-27T13:33:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ablob_population_by_age')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls_population_by_age_tsv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_cases_death')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cases_death",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_cases_and_death",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CasesandDeath": {},
									"CountryLookup": {},
									"Export2ADLS": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_cases_and_death')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_hospital_admissions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "HospitalAdmissions",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_hospial_admission",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"HospitalAdmissions": {},
									"CountryLookup": {},
									"DimDate": {},
									"ExportDaliy2ADLS": {},
									"ExportWeekly2ADLS": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_hospial_admission')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_http_ecdc_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Read contents from the JSON file in the storage account and copy all the files to the data lake.",
				"activities": [
					{
						"name": "Lookup ECDC File List",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_ecdc_file_list",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Iterate file list",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup ECDC File List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup ECDC File List').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Cases and Death",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_http_casesanddeath",
											"type": "DatasetReference",
											"parameters": {
												"sourceBaseURL": {
													"value": "@item().sourceBaseURL",
													"type": "Expression"
												},
												"sourceRelativeURL": {
													"value": "@item().sourceRelativeURL",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls_ecdc_data",
											"type": "DatasetReference",
											"parameters": {
												"sinkFile": {
													"value": "@item().sinkFile",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-06-29T10:26:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ecdc_file_list')]",
				"[concat(variables('factoryId'), '/datasets/ds_http_casesanddeath')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls_ecdc_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ablob_population_by_age')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ablob_handsonprojectcovidsa",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "population_by_age.tsv.gz",
						"container": "population"
					},
					"columnDelimiter": "\t",
					"compressionCodec": "gzip",
					"compressionLevel": "Optimal",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ablob_handsonprojectcovidsa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls_ecdc_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls_handsonprojectcoiddl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sinkFile": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().sinkFile",
							"type": "Expression"
						},
						"folderPath": "ECDC",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls_handsonprojectcoiddl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls_population_by_age_tsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls_handsonprojectcoiddl",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ppopulation_by_age.tsv",
						"folderPath": "TSV",
						"fileSystem": "raw"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls_handsonprojectcoiddl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_df_cases_death')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls_handsonprojectcoiddl",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "cases_death.csv",
						"folderPath": "ECDC",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "country_code",
						"type": "String"
					},
					{
						"name": "continent",
						"type": "String"
					},
					{
						"name": "population",
						"type": "String"
					},
					{
						"name": "indicator",
						"type": "String"
					},
					{
						"name": "daily_count",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "rate_14_day",
						"type": "String"
					},
					{
						"name": "source",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls_handsonprojectcoiddl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_df_cases_death_processed')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls_handsonprojectcoiddl",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Output",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "continent",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "country_code_2_digit",
						"type": "String"
					},
					{
						"name": "country_code_3_digit",
						"type": "String"
					},
					{
						"name": "population",
						"type": "String"
					},
					{
						"name": "reported date",
						"type": "String"
					},
					{
						"name": "confirmed cases_count",
						"type": "String"
					},
					{
						"name": "deaths_count",
						"type": "String"
					},
					{
						"name": "source",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls_handsonprojectcoiddl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_df_country_lookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls_handsonprojectcoiddl",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "country_lookup.csv",
						"folderPath": "ECDC",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "country_code_2_digit",
						"type": "String"
					},
					{
						"name": "country_code_3_digit",
						"type": "String"
					},
					{
						"name": "continent",
						"type": "String"
					},
					{
						"name": "population",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls_handsonprojectcoiddl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_df_dimDate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls_handsonprojectcoiddl",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dim_date.csv",
						"folderPath": "ECDC",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "date_key",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "month",
						"type": "String"
					},
					{
						"name": "day",
						"type": "String"
					},
					{
						"name": "day_name",
						"type": "String"
					},
					{
						"name": "day_of_year",
						"type": "String"
					},
					{
						"name": "week_of_month",
						"type": "String"
					},
					{
						"name": "week_of_year",
						"type": "String"
					},
					{
						"name": "month_name",
						"type": "String"
					},
					{
						"name": "year_month",
						"type": "String"
					},
					{
						"name": "year_week",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls_handsonprojectcoiddl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_df_hopital_admissions_processed')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls_handsonprojectcoiddl",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Output/Daily",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls_handsonprojectcoiddl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_df_hospital_admissions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls_handsonprojectcoiddl",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "hospital_admissions.csv",
						"folderPath": "ECDC",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "indicator",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "year_week",
						"type": "String"
					},
					{
						"name": "value",
						"type": "String"
					},
					{
						"name": "source",
						"type": "String"
					},
					{
						"name": "url",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls_handsonprojectcoiddl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_df_weekly_hospital_processed')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls_handsonprojectcoiddl",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Output/Weekly",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls_handsonprojectcoiddl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ecdc_file_list')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_abs_ecdc_data",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "files.json",
						"container": "ecdc-data"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"sourceBaseURL": {
							"type": "string"
						},
						"sourceRelativeURL": {
							"type": "string"
						},
						"sinkFile": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_abs_ecdc_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_http_casesanddeath')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_http_casesanddeath",
					"type": "LinkedServiceReference",
					"parameters": {
						"sourceBaseURL": {
							"value": "@dataset().sourceBaseURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"sourceBaseURL": {
						"type": "string"
					},
					"sourceRelativeURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@dataset().sourceRelativeURL",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_http_casesanddeath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_ablob_handsonprojectcovidsa')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_ablob_handsonprojectcovidsa_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_abs_ecdc_data')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_abs_ecdc_data_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_adls_handsonprojectcoiddl')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_adls_handsonprojectcoiddl_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_adls_handsonprojectcoiddl_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_http_casesanddeath')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Linked Service to GitHub to fetch the cases and death file",
				"parameters": {
					"sourceBaseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('ls_http_casesanddeath_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_ecdc_adl')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Read contents from the JSON file in the storage account and copy all the files to the data lake.",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_http_ecdc_data",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-06-29T03:55:00",
						"endTime": "2022-06-30T10:17:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_http_ecdc_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_cases_and_death')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_df_cases_death",
								"type": "DatasetReference"
							},
							"name": "CasesandDeath"
						},
						{
							"dataset": {
								"referenceName": "ds_df_country_lookup",
								"type": "DatasetReference"
							},
							"name": "CountryLookup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_df_cases_death_processed",
								"type": "DatasetReference"
							},
							"name": "Export2ADLS"
						}
					],
					"transformations": [
						{
							"name": "FilterEurope"
						},
						{
							"name": "CasesandDeathCount"
						},
						{
							"name": "LookupCountryCode"
						},
						{
							"name": "selectReqColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          country_code as string,",
						"          continent as string,",
						"          population as integer,",
						"          indicator as string,",
						"          daily_count as integer,",
						"          date as date,",
						"          rate_14_day as double,",
						"          source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> CasesandDeath",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> CountryLookup",
						"CasesandDeath filter(continent=='Europe',",
						"     partitionBy('hash', 1)) ~> FilterEurope",
						"LookupCountryCode pivot(groupBy(CasesandDeath@country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          date,",
						"          source),",
						"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
						"     count = sum(daily_count),",
						"     columnNaming: '$V_$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CasesandDeathCount",
						"FilterEurope, CountryLookup lookup(CasesandDeath@country == CountryLookup@country,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> LookupCountryCode",
						"CasesandDeathCount select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          reported_date = date,",
						"          {confirmed cases_count},",
						"          deaths_count,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> selectReqColumns",
						"selectReqColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          continent as string,",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          population as string,",
						"          {reported date} as string,",
						"          {confirmed cases_count} as string,",
						"          deaths_count as string,",
						"          source as string",
						"     ),",
						"     partitionFileNames:['cases_deaths_processed.csv'],",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Export2ADLS"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_df_cases_death')]",
				"[concat(variables('factoryId'), '/datasets/ds_df_country_lookup')]",
				"[concat(variables('factoryId'), '/datasets/ds_df_cases_death_processed')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_hospial_admission')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pull the data from the Data Lake Gen2, split the file into two: weekly and daily admissions, and apply other transformations.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_df_hospital_admissions",
								"type": "DatasetReference"
							},
							"name": "HospitalAdmissions"
						},
						{
							"dataset": {
								"referenceName": "ds_df_country_lookup",
								"type": "DatasetReference"
							},
							"name": "CountryLookup"
						},
						{
							"dataset": {
								"referenceName": "ds_df_dimDate",
								"type": "DatasetReference"
							},
							"name": "DimDate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_df_hopital_admissions_processed",
								"type": "DatasetReference"
							},
							"name": "ExportDaliy2ADLS"
						},
						{
							"dataset": {
								"referenceName": "ds_df_weekly_hospital_processed",
								"type": "DatasetReference"
							},
							"name": "ExportWeekly2ADLS"
						}
					],
					"transformations": [
						{
							"name": "UpdateReqColumns"
						},
						{
							"name": "MatchCountryCodes"
						},
						{
							"name": "SplitDailyWeekly"
						},
						{
							"name": "IcuHospitalCount"
						},
						{
							"name": "ArangeColumns"
						},
						{
							"name": "SortbyDate"
						},
						{
							"name": "Aggregate"
						},
						{
							"name": "Join"
						},
						{
							"name": "GetWeeklyCount"
						},
						{
							"name": "ArrangeData"
						},
						{
							"name": "sort"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          indicator as string,",
						"          date as date,",
						"          year_week as string,",
						"          value as double,",
						"          source as string,",
						"          url as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> HospitalAdmissions",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> CountryLookup",
						"source(output(",
						"          date_key as string,",
						"          date as string,",
						"          year as string,",
						"          month as string,",
						"          day as string,",
						"          day_name as string,",
						"          day_of_year as string,",
						"          week_of_month as string,",
						"          week_of_year as string,",
						"          month_name as string,",
						"          year_month as string,",
						"          year_week as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DimDate",
						"MatchCountryCodes select(mapColumn(",
						"          country = HospitalAdmissions@country,",
						"          country_code_3_digit,",
						"          country_code_2_digit,",
						"          population,",
						"          indicator,",
						"          reported_date = date,",
						"          reported_year_week = year_week,",
						"          value,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> UpdateReqColumns",
						"HospitalAdmissions, CountryLookup lookup(HospitalAdmissions@country == CountryLookup@country,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> MatchCountryCodes",
						"UpdateReqColumns split(indicator=='Daily hospital occupancy'||indicator=='Daily ICU occupancy',",
						"     disjoint: false) ~> SplitDailyWeekly@(Daily, Weekly)",
						"SplitDailyWeekly@Daily pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date,",
						"          source),",
						"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
						"     count = sum(value),",
						"     columnNaming: '$V_$N',",
						"     lateral: false) ~> IcuHospitalCount",
						"IcuHospitalCount select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date,",
						"          {hospital occupancy_count} = {Daily hospital occupancy_count},",
						"          {ICU occupancy_count} = {Daily ICU occupancy_count},",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ArangeColumns",
						"ArangeColumns sort(desc(reported_date, true)) ~> SortbyDate",
						"DimDate aggregate(groupBy(ecdc_week_year = year+'-W'+lpad(week_of_year,2,'0')),",
						"     week_start = min(date),",
						"          week_end = max(date)) ~> Aggregate",
						"SplitDailyWeekly@Weekly, Aggregate join(reported_year_week == ecdc_week_year,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join",
						"Join pivot(groupBy(country,",
						"          country_code_3_digit,",
						"          country_code_2_digit,",
						"          population,",
						"          reported_year_week,",
						"          week_start,",
						"          week_end,",
						"          source),",
						"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
						"     count = sum(value),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> GetWeeklyCount",
						"GetWeeklyCount select(mapColumn(",
						"          country,",
						"          country_code_3_digit,",
						"          country_code_2_digit,",
						"          population,",
						"          reported_year_week,",
						"          week_start,",
						"          week_end,",
						"          {hospital_admissions/100k_count} = {Weekly new hospital admissions per 100k_count},",
						"          {ICU_admissions/100k_count} = {Weekly new ICU admissions per 100k_count},",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> ArrangeData",
						"ArrangeData sort(desc(reported_year_week, true)) ~> sort",
						"SortbyDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['daily_hospital_admissions_processed.csv'],",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportDaliy2ADLS",
						"sort sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Weekly_Hospital_admissions.csv'],",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportWeekly2ADLS"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_df_hospital_admissions')]",
				"[concat(variables('factoryId'), '/datasets/ds_df_country_lookup')]",
				"[concat(variables('factoryId'), '/datasets/ds_df_dimDate')]",
				"[concat(variables('factoryId'), '/datasets/ds_df_hopital_admissions_processed')]",
				"[concat(variables('factoryId'), '/datasets/ds_df_weekly_hospital_processed')]"
			]
		}
	]
}